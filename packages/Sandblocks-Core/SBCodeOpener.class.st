Class {
	#name : #SBCodeOpener,
	#superclass : #Morph,
	#instVars : [
		'categories',
		'selectedCategoryIndex',
		'selectedClassIndex',
		'selectedMethodIndex',
		'classes',
		'messages',
		'currentPanelIndex',
		'result',
		'showingClassSide',
		'preview'
	],
	#category : #'Sandblocks-Core'
}

{ #category : #'as yet unclassified' }
SBCodeOpener >> arrowKey: aChar from: view [

	" ignored "
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> categories [

	^ self systemOrganizer categories
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> classIconAt: anIndex [

	^ self toolIconForm: (ToolIcons iconForClass: (Smalltalk at: (self classes at: anIndex)))
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> classes [

	^ self systemOrganizer listAtCategoryNamed: (self categories at: self selectedCategoryIndex)
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> currentPanel [

	^ self submorphs at: currentPanelIndex
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> delete [

	super delete.
	
	preview ifNotNil: #delete
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> focus: aMethodOrClass [

	aMethodOrClass ifNil: [^ self].
	
	aMethodOrClass isBehavior
		ifTrue: [
			self showingClassSide: aMethodOrClass isClassSide.
			self selectedCategoryIndex: (self categories indexOf: aMethodOrClass category).
			self selectedClassIndex: (self classes indexOf: aMethodOrClass theNonMetaClass name) moved: false.
			self selectedMethodIndex: 1.
			self focusPanel: 3]
		ifFalse: [
			self showingClassSide: aMethodOrClass methodClass isClassSide.
			self selectedCategoryIndex: (self categories indexOf: aMethodOrClass methodClass category).
			self selectedClassIndex: (self classes indexOf: aMethodOrClass methodClass theNonMetaClass name).
			self selectedMethodIndex: (self methods indexOf: aMethodOrClass selector) moved: false.
			self focusPanel: 3]
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> focusPanel: aNumber [

	currentPanelIndex := aNumber clampLow: 1 high: self submorphCount.
	self methods ifEmpty: [currentPanelIndex := currentPanelIndex min: 2].
	
	(currentPanelIndex = 2 and: [self selectedClassIndex = 0]) ifTrue: [self selectedClassIndex: 1 moved: false].
	currentPanelIndex < 2 ifTrue: [self selectedClassIndex: 0 moved: false].
	
	(currentPanelIndex = 3 and: [self selectedMethodIndex = 0]) ifTrue: [self selectedMethodIndex: 1 moved: false].
	currentPanelIndex < 3 ifTrue: [self selectedMethodIndex: 0 moved: false]
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> handlesKeyboard: anEvent [

	^ true
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> initialize [

	super initialize.
	
	selectedCategoryIndex := 1.
	selectedClassIndex := 0.
	selectedMethodIndex := 0.
	currentPanelIndex := 1.
	showingClassSide := false.
	
	self
		height: 200;
		changeTableLayout;
		addDropShadow;
		vResizing: #rigid;
		hResizing: #shrinkWrap;
		listDirection: #leftToRight;
		addMorphBack: (categories := (PluggableListMorphPlus
			on: self
			list: #categories
			selected: #selectedCategoryIndex
			changeSelected: #selectedCategoryIndex:
			menu: #menu:evaluate:)
				vResizing: #spaceFill;
				width: 200;
				yourself);
		addMorphBack: (classes := (PluggableListMorphPlus
			on: self
			list: #classes
			selected: #selectedClassIndex
			changeSelected: #selectedClassIndex:
			menu: #menu:evaluate:)
				getIconSelector: #classIconAt:;
				doubleClickSelector: #openSelectedMethod;
				vResizing: #spaceFill;
				width: 200;
				yourself);
		addMorphBack: (messages := (PluggableListMorphPlus
			on: self
			list: #methods
			selected: #selectedMethodIndex
			changeSelected: #selectedMethodIndex:
			menu: #menu:evaluate:)
				getIconSelector: #messageIconAt:;
				doubleClickSelector: #openSelectedMethod;
				vResizing: #spaceFill;
				width: 200;
				yourself).
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> keyStroke: anEvent [

	anEvent keyCharacter = Character escape ifTrue: [^ self delete].
	(anEvent keyCharacter = Character arrowRight or: [anEvent keyCharacter = $l and: [anEvent commandKeyPressed]]) ifTrue: [^ self focusPanel: currentPanelIndex + 1].
	(anEvent keyCharacter = Character arrowLeft or: [anEvent keyCharacter = $h and: [anEvent commandKeyPressed]]) ifTrue: [^ self focusPanel: currentPanelIndex - 1].
	anEvent keyCharacter = Character cr ifTrue: [result := self selectedClassOrMethod. ^ self delete].
	anEvent keyCharacter = Character tab ifTrue: [self showingClassSide: self showingClassSide not].
	(anEvent keyCharacter = $j and: [anEvent commandKeyPressed]) ifTrue: [^ self select: 1].
	(anEvent keyCharacter = $k and: [anEvent commandKeyPressed]) ifTrue: [^ self select: -1].
	((anEvent keyCharacter = $f or: [anEvent keyCharacter = $x]) and: [anEvent commandKeyPressed]) ifTrue: [^ self focus: UIManager default chooseClassOrTrait].
	self currentPanel keyStroke: anEvent
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> menu: aMenu evaluate: anObject [
	" escape has been pressed - we ignore this and close instead "
	
	self delete.
	^ nil
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> messageIconAt: aNumber [

	^ self toolIconForm: (ToolIcons
		iconForClass: (Smalltalk at: (self classes at: self selectedClassIndex))
		selector: (self methods at: aNumber))
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> methods [

	^ self selectedClassIndex > 0 ifTrue: [
		showingClassSide
			ifTrue: [(Smalltalk at: (self classes at: self selectedClassIndex)) class methodDict keys]
			ifFalse: [(Smalltalk at: (self classes at: self selectedClassIndex)) methodDict keys]] ifFalse: [#()]
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> open [

	| hand world |
	" from DialogWindow>>getUserResponse "
	self openInWorld.
	hand := self currentHand.
	world := self currentWorld.
	
	hand showTemporaryCursor: nil.
	
	hand keyboardFocus in: [:priorKeyboardFocus |
		hand mouseFocus in: [:priorMouseFocus |
			hand newMouseFocus: self.
			hand newKeyboardFocus: self.
			
			[[self isInWorld] whileTrue: [world doOneSubCycle]]
				ifCurtailed: [self delete].
			
			hand newKeyboardFocus: priorKeyboardFocus.
			hand newMouseFocus: priorMouseFocus]].
	
	^ result
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> openFor: aMethodOrClass [

	self focus: aMethodOrClass.
	^ self open
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> openSelectedMethod [

	result := self selectedClassOrMethod.
	self delete
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> positionNear: aMorph [

	self position: (aMorph center x - (self fullBounds width / 2)) @ aMorph top
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> select: aNumber [

	currentPanelIndex caseOf: {
		[1] -> [self selectedCategoryIndex: selectedCategoryIndex + aNumber].
		[2] -> [self selectedClassIndex: selectedClassIndex + aNumber moved: true].
		[3] -> [self selectedMethodIndex: selectedMethodIndex + aNumber moved: true]
	}
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedCategory [

	^ self categories at: self selectedCategoryIndex
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedCategoryIndex [

	^ selectedCategoryIndex
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedCategoryIndex: aNumber [

	aNumber < 1
		ifTrue: [selectedCategoryIndex := self categories size]
		ifFalse: [
			aNumber > self categories size
				ifTrue: [selectedCategoryIndex := 1]
				ifFalse: [selectedCategoryIndex := aNumber]].
	
	selectedMethodIndex := 0.
	selectedClassIndex := 0.
	self changed: #selectedCategoryIndex.
	self changed: #classes.
	self changed: #methods.
	self selectedClassIndex: 0 moved: false
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedClass [

	^ self classes at: self selectedClassIndex
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedClassIndex [

	^ selectedClassIndex
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedClassIndex: aNumber [

	self selectedClassIndex: aNumber moved: true
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedClassIndex: aNumber moved: aBoolean [

	(aNumber < 1 and: [aBoolean])
		ifTrue: [selectedClassIndex := self classes size]
		ifFalse: [
			aNumber > self classes size
				ifTrue: [selectedClassIndex := 1]
				ifFalse: [selectedClassIndex := aNumber]].

	self changed: #selectedClassIndex.
	self changed: #methods.
	self selectedMethodIndex: 0 moved: false
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedClassOrMethod [

	^ (self selectedMethodIndex > 0 and: [self methods notEmpty])
		ifTrue: [self selectedMethod]
		ifFalse: [self selectedClassIndex > 0 ifTrue: [Smalltalk at: self selectedClass] ifFalse: [nil]]
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedMethod [

	| class |
	class := (Smalltalk at: self selectedClass).
	showingClassSide ifTrue: [class := class class].
	^  class >> (self methods at: self selectedMethodIndex)
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedMethodIndex [

	^ selectedMethodIndex
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedMethodIndex: aNumber [
	
	self selectedMethodIndex: aNumber moved: true
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> selectedMethodIndex: aNumber moved: aBoolean [
	
	(aNumber < 1 and: [aBoolean])
		ifTrue: [selectedMethodIndex := self methods size]
		ifFalse: [
			aNumber > self methods size
				ifTrue: [selectedMethodIndex := 1]
				ifFalse: [selectedMethodIndex := aNumber]].
	
	self changed: #selectedMethodIndex.
	
	preview ifNotNil: #delete.
	
	(selectedMethodIndex > 0 and: [selectedClassIndex > 0]) ifTrue: [
		preview := SBSelection new
			methodClass: self selectedClass;
			colorPolicy: SBEditor defaultColorPolicy new;
			addMorphBack: self selectedMethod asSandblock.
		preview openInWorld.
		preview topCenter: self bottomCenter]
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> showingClassSide [

	^ showingClassSide
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> showingClassSide: aBoolean [

	showingClassSide := aBoolean.
	self changed: #methods.
	self selectedMethodIndex: (self methods notEmpty ifTrue: [1] ifFalse: [0]) moved: false
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> systemOrganizer [

	^ SystemOrganizer default
]

{ #category : #'as yet unclassified' }
SBCodeOpener >> toolIconForm: aSymbolOrForm [

	" there appears to be an API change here that we need to catch "
	^ aSymbolOrForm isForm ifTrue: [aSymbolOrForm] ifFalse: [ToolIcons  iconNamed:aSymbolOrForm]
]
